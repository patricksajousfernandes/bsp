# Frontend.py

import streamlit as st

# Verifique se o m칩dulo backend est치 dispon칤vel e importe-o
try:
    import backend
except ModuleNotFoundError:
    st.error('M칩dulo backend n칚o encontrado. Verifique se est치 instalado e dispon칤vel.')

# Configura칞칫es iniciais da p치gina
st.set_page_config(page_title='Bspzinho', layout='wide')

# CSS personalizado para o tema escuro e estilo do chat
# ... (mantenha o CSS como est치)

# T칤tulo do chatbot com 칤cone
st.markdown("<h1 style='text-align: center; color: blue;'>Bspzinho 游땙</h1>", unsafe_allow_html=True)

# Inicializa a mem칩ria do chatbot e o hist칩rico do chat
if 'memory' not in st.session_state:
    st.session_state.memory = []
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

# Fun칞칚o para formatar a resposta do chatbot
def format_response(response):
    # Divida a resposta em linhas
    lines = response.split('- **')
    # Remova espa칞os vazios e linhas em branco
    lines = [line.strip() for line in lines if line.strip()]
    # Formate cada linha como um item de lista HTML
    formatted_lines = ['<li>' + line.replace('**', '') + '</li>' for line in lines]
    # Junte todas as linhas formatadas em uma lista HTML
    return '<ul>' + ''.join(formatted_lines) + '</ul>'

# Container para o hist칩rico do chat
with st.container():
    st.markdown("## Hist칩rico do Chat")
    # Renderiza o hist칩rico do chat
    for message in st.session_state.chat_history:
        if message['role'] == 'user':
            st.markdown(f"<div class='message user-message'>{message['text']}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div class='message assistant-message'>{message['text']}</div>", unsafe_allow_html=True)

# Container para a entrada do usu치rio
with st.container():
    st.markdown("## Fa칞a sua Pergunta")
    
    # Crie o widget com um label n칚o vazio e oculte-o se necess치rio
    input_text = st.text_input("Digite aqui sua pergunta...", key="user_input", label_visibility="collapsed")

    # Bot칚o para enviar a mensagem
    send_button = st.button('Enviar')

    # Verifica se Enter foi pressionado ou se o bot칚o foi clicado
    if send_button or st.session_state.user_input:
        with st.spinner('Aguarde enquanto a resposta est치 sendo gerada...'):
            # Adiciona a mensagem do usu치rio ao hist칩rico do chat
            st.session_state.chat_history.append({"role": "user", "text": input_text})

            # Processa a mensagem do usu치rio e obt칠m a resposta do chatbot
            chat_response, st.session_state.memory = backend.utilizar_llm_com_pinecone_e_RAG(input_text, st.session_state.memory)

            # Formata a resposta do chatbot
            formatted_chat_response = format_response(chat_response)

            # Adiciona a resposta formatada do chatbot ao hist칩rico do chat
            st.session_state.chat_history.append({"role": "assistant", "text": formatted_chat_response})

            # Exibe a resposta formatada do chatbot
            st.markdown(f"<div class='message assistant-message'>{formatted_chat_response}</div>", unsafe_allow_html=True)

            # Limpa a caixa de entrada ap칩s o envio
            st.session_state.user_input = ""
